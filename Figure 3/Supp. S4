library(tidyverse)
library(Seurat)
library(SingleCellExperiment)
library(slingshot)
library(tradeSeq)
library(cowplot)
library(ggrastr)
library(DelayedMatrixStats)
library(RColorBrewer)
library(viridis)
library(SCORPIUS)
library(zoo)
library(pheatmap)
library(reshape2)
library(ggrepel)
library(clusterProfiler)
library(enrichplot)
library(ggnewscale)
library(plyr)

### Read in data
srt  <- readRDS("all_red.epi.from.individual.overall.int.rds")
meta <- read_csv("horizontal_meta.csv")

### Annotate metadata & set identities
srt@meta.data <- srt@meta.data %>%
  rownames_to_column("barcode") %>%
  select(-contains("cellType")) %>%
  left_join(meta %>% select(barcode, cellType), by = "barcode") %>%
  mutate(
    tissue      = case_when(
      samptype == "TEC" ~ "T",
      samptype == "EEC" ~ "E",
      samptype == "BEC" ~ "B",
      samptype == "LEC" ~ "L"
    ),
    group_label = str_glue("{cellType} {tissue}")
  ) %>%
  column_to_rownames("barcode")
Idents(srt) <- "group_label"

### Rename clusters
srt <- RenameIdents(srt, c(
  "Bud Tip Progenitor L"          = "BTP L",
  "Bud Tip Progenitor Adjacent L" = "BTP Adjacent L",
  "Bud Tip Progenitor B"          = "BTP B"
))

### Order identities
ordered_levels <- c(
  'mcTEC T','cTEC T','mTECI T','mTECII T','mTECIII/IV T','TECneuro T','TECmyo T',
  'Epithelial Basal B','Club B','Goblet B','Submucosal Gland B','Secretory B','Multiciliated B','BTP B',
  'BTP L','BTP Adjacent L','Multiciliated L','Secretory L','Epithelial Basal L','Neuroendocrine L',
  'Epithelial Basal E','Suprabasal E','Multiciliated E','Gastric Epithelial E'
)
srt@active.ident <- factor(Idents(srt), levels = ordered_levels)

### Subset clusters & find markers
sub     <- subset(srt, idents = c(
  'mcTEC T','cTEC T','mTECI T','mTECII T',
  'Epithelial Basal B','BTP L','Epithelial Basal E'
))
markers <- FindAllMarkers(sub)

### EMAP plot helpers
read_gmt <- function(path) {
  tibble(line = read_lines(path)) %>%
    separate(line, into = c("pathway","url","genes"), sep = "\t", extra = "merge") %>%
    select(-url) %>%
    mutate(genes = str_split(genes, "\t")) %>%
    unnest(genes)
}

get_rank_list <- function(path, dge_type = "dge") {
  df <- read_csv(path)
  if (dge_type == "cge") {
    df <- df %>%
      select(-contains(c("pct","max","min"))) %>%
      pivot_longer(-c(cell_group,gene), names_to = c("tissue","metric"),
                   names_pattern = "(.{3})_(.*)", values_to = "value") %>%
      pivot_wider(names_from = metric, values_from = value) %>%
      group_by(cell_group,gene) %>%
      summarise(avg_log2FC = mean(avg_log2FC, na.rm = TRUE), .groups = "drop") %>%
      rename(cluster = cell_group)
  } else {
    df <- df %>% select(cluster, gene, avg_log2FC)
  }
  df %>%
    arrange(cluster, desc(avg_log2FC)) %>%
    group_by(cluster) %>%
    nest() %>%
    mutate(data = map(data, ~ deframe(.x %>% select(avg_log2FC, gene)))) %>%
    deframe()
}

### Run GSEA & plot results
version       <- "7.5"
gmt_path      <- str_glue("https://data.broadinstitute.org/gsea-msigdb/msigdb/release/{version}/c2.cp.v{version}.symbols.gmt")
pathway_key   <- read_gmt(gmt_path)
cluster_genes <- get_rank_list("path/marks.csv", dge_type = "dge")

set.seed(100)
comp_res <- compareCluster(
  geneClusters   = cluster_genes,
  fun            = "GSEA",
  TERM2GENE      = pathway_key,
  pvalueCutoff   = 0.01
) %>% pairwise_termsim()

comp_res@compareClusterResult <- comp_res@compareClusterResult %>%
  filter(enrichmentScore > 0)

comp_df <- comp_res@compareClusterResult %>%
  separate(ID, into = c("Ontology","Pathway"), sep = "_", extra = "merge") %>%
  filter(Ontology %in% c("REACTOME","KEGG")) %>%
  mutate(
    Cluster = factor(Cluster, levels = ordered_levels),
    ID      = fct_inorder(ID)
  ) %>%
  arrange(Cluster, desc(enrichmentScore))

top_paths <- comp_df %>%
  group_by(Cluster) %>%
  slice_max(enrichmentScore, n = 20) %>%
  pull(Pathway) %>%
  unique()

plt_pathwayDot_full <- comp_df %>%
  filter(Pathway %in% top_paths) %>%
  ggplot(aes(x = Cluster, y = ID, fill = enrichmentScore, size = -log10(p.adjust))) +
  geom_point(shape = 21) +
  scale_fill_viridis_c(option = "rocket", direction = -1) +
  theme_minimal() +
  theme(
    text           = element_text(size = 12),
    axis.text.x    = element_text(angle = 90, vjust = 0.5, hjust = 1),
    axis.text.y    = element_text(color = "black")
  ) +
  labs(x = NULL, y = NULL) +
  guides(size = guide_legend(override.aes = list(shape = 21)))

library(Seurat)
library(ggplot2)
library(patchwork)
library(tidyverse)
library(biomaRt)

#########Process samples

# Define the parent directory and sample folders
parent_dir <- "/Visium/OUTS/"
sample_dirs <- c( "ERR13354909", "ERR13386037")

# Initialize list to store Seurat objects
seurat_objects <- list()

# Loop over sample folders: load image, create Seurat object, filter, and run clustering
for (sample in sample_dirs) {
  sample_path <- file.path(parent_dir, sample)
  image_path  <- file.path(sample_path, "spatial/")
  
  # Read spatial image and load data
  img <- Read10X_Image(image_path, image.name = "tissue_hires_image.png")
  srt <- Load10X_Spatial(
    data.dir = sample_path, 
    filename = "filtered_feature_bc_matrix.h5", 
    image = img
  )
  
  # Set low-res scale factor to equal high-res for consistency
  srt@images$slice1@scale.factors$lowres <- srt@images$slice1@scale.factors$hires
  
  # Compute mitochondrial percentage and add to metadata
  srt[["percent.mt"]] <- PercentageFeatureSet(srt, pattern = "^MT-")
  
  # QC plots and filtering based on nFeature and percent.mt
  VlnPlot(srt, features = "nFeature_Spatial")
  VlnPlot(srt, features = "percent.mt")
  srt <- subset(srt, nFeature_Spatial > 1000 & percent.mt < 10)
  
  # Normalization, dimensional reduction, clustering, and UMAP
  srt <- SCTransform(srt, assay = "Spatial", verbose = FALSE)
  srt <- RunPCA(srt, assay = "SCT", verbose = FALSE)
  srt <- FindNeighbors(srt, reduction = "pca", dims = 1:30)
  srt <- FindClusters(srt, verbose = FALSE, resolution = 0.1)
  srt <- RunUMAP(srt, reduction = "pca", dims = 1:30)
  
  seurat_objects[[sample]] <- srt
}

#####manual removal of some Visum Spots at edges/over vasculature

# Use only the remaining sample folders
sample_dirs <- c("ERR13354909", "ERR13386037")
filtered_seurat_objects <- list()

for (sample in sample_dirs) {
  sample_path <- file.path(parent_dir, sample)
  csv_path    <- file.path(sample_path, "select.csv")
  
  # Load the barcodes from CSV and subset the Seurat object
  cells <- read.csv(csv_path)$Barcode
  srt <- subset(seurat_objects[[sample]], cells = cells)
  filtered_seurat_objects[[sample]] <- srt
}

# Spatial plot for filtered objects
spatial_plots <- lapply(names(filtered_seurat_objects), function(sample) {
  SpatialPlot(filtered_seurat_objects[[sample]]) +
    ggtitle(sample) +
    theme(
      plot.title = element_text(hjust = 0.5, size = 14),
      legend.position = "right",
      legend.direction = "vertical"
    )
})
combined_plot <- plot_grid(plotlist = spatial_plots, ncol = 2)
combined_plot


# Process Fetal sample (ERR13354909)
fetal <- filtered_seurat_objects$ERR13354909
DimPlot(fetal)
VlnPlot(fetal, features = 'nFeature_Spatial')
fetal <- subset(fetal, idents = c(3, 1))
fetal <- RenameIdents(fetal, `1` = "Cortex", `3` = "Medulla")
fetal$Type <- fetal@active.ident

# Process Postnatal sample (ERR13386037)
pn <- filtered_seurat_objects$ERR13386037
DimPlot(pn)
SpatialPlot(pn, crop = TRUE)
edge <- read.csv(file.path(parent_dir, "ERR13386037", "edge.csv"))
pn <- subset(pn, cells = edge$Barcode, invert = TRUE)
pn <- FindClusters(pn, verbose = FALSE, resolution = 0.1)
pn <- RenameIdents(pn, `0` = "Cortex", `1` = "Medulla")
pn$Type <- pn@active.ident

# Set original identities and merge the samples
fetal$orig.ident <- 'Fetal'
pn$orig.ident <- 'PN'
merge <- merge(fetal, y = pn, add.cell.ids = c("fet", "pn"))

# Re-run processing on merged object
merge <- SCTransform(merge, assay = "Spatial", verbose = FALSE)
merge <- RunPCA(merge, assay = "SCT", verbose = FALSE)
merge <- FindNeighbors(merge, reduction = "pca", dims = 1:30)
merge <- FindClusters(merge, verbose = FALSE, resolution = 0.1)
merge <- RunUMAP(merge, reduction = "pca", dims = 1:30)
DimPlot(merge, group.by = 'Type')

####add reactome Type-I/II IFN gene set module scores

# Function to read GMT files
read_gmt <- function(path) {
  tibble(line = read_lines(path)) %>% 
    separate(line, into = c("pathway", "url", "genes"), sep = "\t", extra = "merge") %>% 
    dplyr::select(-url) %>% 
    mutate(genes = str_split(genes, "\t")) %>% 
    unnest(genes)
}

version <- "7.5"
gmt_path <- str_glue("https://data.broadinstitute.org/gsea-msigdb/msigdb/release/{version}/c2.cp.v{version}.symbols.gmt")
pathway_key <- read_gmt(gmt_path)

# Add module scores for two pathways
pathway1 <- "REACTOME_INTERFERON_GAMMA_SIGNALING"
genes_gamma <- pathway_key %>% filter(pathway == pathway1) %>% pull(genes)
merge <- AddModuleScore(merge, list(genes_gamma), name = "gamma")

pathway2 <- "REACTOME_INTERFERON_ALPHA_BETA_SIGNALING"
genes_ab <- pathway_key %>% filter(pathway == pathway2) %>% pull(genes)
merge <- AddModuleScore(merge, list(genes_ab), name = "ab")

Idents(merge) <- 'Type'


###aspect ratio calculation to display plots without distortion

# Calculate aspect ratio for 'pn' sample
pn_coords <- as.data.frame(pn@images$slice1@boundaries[["centroids"]]@coords)
aspect_ratio <- (max(pn_coords$x) - min(pn_coords$x)) / (max(pn_coords$y) - min(pn_coords$y))
SpatialPlot(fetal, image.alpha = 1, crop = TRUE, image.scale = 'hires') +
  theme(aspect.ratio = aspect_ratio)

# Repeat for fetal sample (if needed)
fetal_coords <- as.data.frame(fetal@images$slice1@boundaries[["centroids"]]@coords)
aspect_ratio <- (max(fetal_coords$x) - min(fetal_coords$x)) / (max(fetal_coords$y) - min(fetal_coords$y))
SpatialPlot(fetal, image.alpha = 1, crop = TRUE, image.scale = 'hires') +
  theme(aspect.ratio = aspect_ratio)

####Figure 3G Feature/DimPlots

# Set predefined aspect ratios for merged plots
fetal_aspect_ratio <- 1.073573
pn_aspect_ratio <- 1.447734

# Example: Adjust plots with titles and aspect ratio using patchwork
plt <- list()  # 'plt' should be defined or generated earlier in your workflow
plt[[1]] <- plt[[1]] + ggtitle("Fetal") +
  theme(aspect.ratio = fetal_aspect_ratio) + NoLegend()
plt[[2]] <- plt[[2]] + ggtitle("Postnatal") +
  theme(aspect.ratio = pn_aspect_ratio)
plt[[2]][["plot_env"]][["pt.size.factor"]] <- 2
final_plot <- plt[[1]] + plt[[2]] + plot_layout(ncol = 2)
print(final_plot)

# Spatial plots for module scores and markers
SpatialPlot(merge, image.alpha = 1, crop = TRUE, image.scale = 'hires', images = 'slice1')

plt2 <- SpatialFeaturePlot(merge, features = 'gamma1', image.alpha = 1, crop = TRUE,
                           image.scale = 'hires', images = 'slice1.2', pt.size.factor = 4, alpha = c(0.05,1)) +
  theme(aspect.ratio = pn_aspect_ratio) + NoLegend()
plt1 <- SpatialFeaturePlot(merge, features = 'gamma1', image.alpha = 1, crop = TRUE,
                           image.scale = 'hires', images = 'slice1', pt.size.factor = 3.7, alpha = c(0.05,1)) +
  theme(aspect.ratio = fetal_aspect_ratio) + NoLegend()

plt4 <- SpatialFeaturePlot(merge, features = 'ITGAX', image.alpha = 1, crop = TRUE,
                           image.scale = 'hires', images = 'slice1.2', pt.size.factor = 4, alpha = c(0.05,1)) +
  theme(aspect.ratio = pn_aspect_ratio) + NoLegend()
plt3 <- SpatialFeaturePlot(merge, features = 'ITGAX', image.alpha = 1, crop = TRUE,
                           image.scale = 'hires', images = 'slice1', pt.size.factor = 3.7, alpha = c(0.05,1)) +
  theme(aspect.ratio = fetal_aspect_ratio) + NoLegend()

# Spatial dimension plots with custom colors
p1 <- SpatialDimPlot(merge, image.alpha = 1, crop = TRUE, image.scale = 'hires',
                     images = 'slice1.2', pt.size.factor = 4, alpha = 0.3) +
  theme(aspect.ratio = pn_aspect_ratio) + NoLegend() +
  scale_fill_manual(values = c("darkred", "orange"))
p2 <- SpatialDimPlot(merge, image.alpha = 1, crop = TRUE, image.scale = 'hires',
                     images = 'slice1', pt.size.factor = 3.7, alpha = 0.3) +
  theme(aspect.ratio = fetal_aspect_ratio) + NoLegend() +
  scale_fill_manual(values = c("darkred", "orange"))

dim_plot <- p2 | p1

# Additional merged spatial and feature plots
SpatialDimPlot(merge, image.alpha = 1, crop = TRUE, image.scale = 'hires', images = 'slice1.2',
               pt.size.factor = 4, alpha = 0.2) +
  scale_color_manual(values = c("green", "orange")) +
  theme(aspect.ratio = pn_aspect_ratio) + NoLegend()

# Save gamma feature plot
gamma_plot <- plt1 | plt2

# Save 'ab' feature plot
plt2 <- SpatialFeaturePlot(merge, features = 'ab1', image.alpha = 1, crop = TRUE, image.scale = 'hires',
                           images = 'slice1.2', pt.size.factor = 4, alpha = c(0.05,1)) +
  theme(aspect.ratio = pn_aspect_ratio) + NoLegend()
plt1 <- SpatialFeaturePlot(merge, features = 'ab1', image.alpha = 1, crop = TRUE, image.scale = 'hires',
                           images = 'slice1', pt.size.factor = 3.7, alpha = c(0.05,1)) +
  theme(aspect.ratio = fetal_aspect_ratio) + NoLegend()
ab_plot <- plt1 | plt2

##########Violin Plots (Figure 3H)
p1 <- VlnPlot(merge, features = 'gamma1', split.by = 'Type', pt.size = 0,
              group.by = 'orig.ident', cols = c("darkred", "orange")) +
  stat_summary(fun = mean, geom = "point", position = position_dodge(0.9)) +
  theme_minimal() + NoLegend() +
  theme(axis.text.x = element_text(size = 13, color = 'black', angle = 45, hjust = 1),
        axis.text.y = element_text(size = 13, color = 'black'),
        axis.title.y = element_blank(),
        plot.title = element_text(size = 13)) +
  scale_x_discrete(labels = c('Fetal', 'Postnatal')) + NoLegend()

p2 <- VlnPlot(merge, features = 'ab1', split.by = 'Type', pt.size = 0,
              group.by = 'orig.ident', cols = c("darkred", "orange")) +
  stat_summary(fun = mean, geom = "point", position = position_dodge(0.9)) +
  theme_minimal() + NoLegend() +
  theme(axis.text.x = element_text(size = 13, color = 'black', angle = 45, hjust = 1),
        axis.text.y = element_text(size = 13, color = 'black'),
        axis.title.y = element_blank(),
        plot.title = element_text(size = 13)) +
  scale_x_discrete(labels = c('Fetal', 'Postnatal')) + NoLegend()

p1 <- p1 + theme(axis.title.x = element_blank(), title = element_blank())
p2 <- p2 + theme(axis.title.x = element_blank(), title = element_blank())
combined_vln <- p1 / p2



library(tidyverse)
library(ggrastr)
srt <- readRDS("allsamps-new3000.1000.1000-100000.3MAD10.SCT.regressed.int.rds")
meta <- read_csv("horizontal_metadata.csv")


srt@meta.data <- srt@meta.data %>% 
  rownames_to_column("barcode") %>% 
  select_at(vars(!contains("cellType"))) %>% 
  left_join(meta %>% select(barcode, cellType,cellGroup)) %>% 
  mutate(tissue = case_when(
    samptype == "TEC" ~ "Thymus",
    samptype == "EEC" ~ "Esophagus",
    samptype == "BEC" ~ "Bronchus",
    samptype == "LEC" ~ "Lung"
  )) %>% 
  mutate(group_label = str_glue("{tissue}_{cellType}")) %>% 
  column_to_rownames("barcode")

srt <- SetIdent(srt, value = srt@meta.data$cellGroup)
DefaultAssay(srt) <- "RNA"


#### Differential List Generation
library(future)
plan("multisession", workers = 6)


epithelial<- FindMarkers(srt,min.pct = 0.7, ident.1 = "Epithelial", ident.2 = c("Mesenchymal","Endothelial","Immune","Neuronal","Myoepithelial"))
mesenchymal<- FindMarkers(srt,min.pct = 0.7, ident.1 = "Mesenchymal", ident.2 = c("Epithelial","Endothelial","Immune","Neuronal","Myoepithelial"))
endothelial<- FindMarkers(srt,min.pct = 0.7, ident.1 = "Endothelial", ident.2 = c("Epithelial","Mesenchymal","Immune","Neuronal","Myoepithelial"))
Immune<- FindMarkers(srt,min.pct = 0.7, ident.1 = "Immune", ident.2 = c("Epithelial","Mesenchymal","Endothelial","Neuronal","Myoepithelial"))
Neuronal<- FindMarkers(srt,min.pct = 0.7, ident.1 = "Neuronal", ident.2 = c("Epithelial","Mesenchymal","Endothelial","Immune","Myoepithelial"))
Myoepithelial<- FindMarkers(srt,min.pct = 0.7, ident.1 = "Myoepithelial", ident.2 = c("Epithelial","Mesenchymal","Endothelial","Immune","Neuronal"))

epithelial$names <- rownames(epithelial)
mesenchymal$names <- rownames(mesenchymal)
endothelial$names <- rownames(endothelial)
Immune$names <- rownames(Immune)
Neuronal$names <- rownames(Neuronal)
Myoepithelial$names <- rownames(Myoepithelial)

ep <- subset(epithelial, pct.1 > 0.7,select=p_val:names)
ep <- ep[order(-ep1$avg_log2FC),]
mes <- subset(mesenchymal, pct.1 > 0.7,select=p_val:names)
mes <- mes[order(-mes1$avg_log2FC),]
end<- subset(endothelial, pct.1 > 0.7,select=p_val:names)
end <- end[order(-end$avg_log2FC),]
imm<- subset(Immune, pct.1 > 0.7,select=p_val:names)
imm <- imm[order(-imm$avg_log2FC),]
neu<- subset(Neuronal, pct.1 > 0.7,select=p_val:names)
neu <- neu[order(-neu$avg_log2FC),]
myo<- subset(Myoepithelial, pct.1 > 0.7,select=p_val:names)
myo <- myo[order(-myo$avg_log2FC),]




srt_avg <- AverageExpression(srt, assays = "RNA", group.by = "cellGroup", return.seurat = T)
# Remove NA cluster created from cells that didn't fall in an annotation group
srt_avg <- srt_avg[,!grepl("NA", colnames(srt_avg))] 
# Reprocess data
srt_avg <- NormalizeData(srt_avg)
srt_avg <- FindVariableFeatures(srt_avg, selection.method = "vst", nfeatures = 2000)
all.genes <- rownames(srt_avg)
srt_avg <- ScaleData(srt_avg, features = all.genes)
srt_avg <- RunPCA(srt_avg, features = VariableFeatures(object = srt_avg), npcs = 20)

cluster_order <- c("Epithelial", "Endothelial","Mesenchymal","Immune","Neuronal","Myoepithelial")
#### dataframe containing list of 20 differential genes from each cell group derived from analysis above
all_genes_df <- read_csv("cell_groupDGE.csv")




all_genes <- all_genes_df %>% pull(gene)
all_genes_data <- t(as.matrix(srt_avg[all_genes,]@assays$RNA@scale.data)) %>% 
  as.data.frame() %>% 
  rownames_to_column("group") %>% 
  pivot_longer(-group, names_to = "gene", values_to = "value") %>%
  left_join(all_genes_df, by = "gene") %>% 
  mutate(gene = factor(gene, levels = rev(all_genes))) %>% 
  mutate(group = factor(group, levels = rev(cluster_order))) %>% 
  mutate(cluster = factor(cluster, levels = cluster_order)) 




plt_htmp <- bind_rows(
  all_genes_data %>% mutate(feature = "All genes"),
  #tf_genes_data %>% mutate(feature = "Transcription factors")
) %>% 
  ggplot(aes(x = group, y = gene, fill = value))+
  geom_tile()+
  ggh4x::facet_grid2(cluster~feature,scales = "free", independent = "y")+
  theme_minimal()+
  scale_fill_viridis_c(option = "mako") +
  labs(x = NULL, y = NULL, fill = "Scaled\nexpression")+
  theme(axis.text.x = element_blank(),
        axis.text.y = element_text(size = 10),panel.grid.major = element_blank())
plt_htmp

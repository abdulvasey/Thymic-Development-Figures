library(Seurat)
library(tidyverse)
library(dplyr)

# Load Seurat object and metadata 
srt <- readRDS("teconly.from.all.1.repca.reclust.int.rds")
meta <- read_csv("vertical_metadata.csv")

# Add metadata to srt
srt@meta.data <- srt@meta.data %>% 
  rownames_to_column("barcode") %>% 
  select(barcode:age) %>% 
  left_join(meta %>% select(barcode, cellType, type_age, macro, cellType_macro)) %>% 
  mutate(age = factor(age, levels = c("6w","7w","16w","17w","18w","3mo","10mo"))) %>%
  column_to_rownames("barcode")

# Set identities to cell types
srt <- SetIdent(srt, value = srt@meta.data$cellType)

# Reorder and rename cluster identities
ord <- c("Cycling TEC", "mcTEC", "cTEC", "mTEC 1", "mTEC 2", "mTEC 3/4", "TEC myo/neuro", "Parathyroid")
Idents(srt) <- 'cellType'
srt@active.ident <- factor(srt@active.ident, levels = ord)
new.cluster.ids <- c("Cycling TEC", "mcTEC", "cTEC", "mTECI", "mTECII", "mTECIII/IV", "TEC myo/neuro", "Parathyroid")
names(new.cluster.ids) <- levels(srt)
srt <- RenameIdents(srt, new.cluster.ids)

## subsetting parathyroid/late medullary clusters
sub<-subset(srt,idents = c('mTECII','mTECIII/IV','Parathyroid','TEC myo/neuro'))

### SCT integration
### macro columns denotes general age of samples (embryonic, fetal, and postnatal)
ifnb.list <- SplitObject(sub, split.by = "macro")
ifnb.list <- lapply(X = ifnb.list, FUN = SCTransform)
features <- SelectIntegrationFeatures(object.list = ifnb.list, nfeatures = 3000)
ifnb.list <- PrepSCTIntegration(object.list = ifnb.list, anchor.features = features)
immune.anchors <- FindIntegrationAnchors(object.list = ifnb.list, normalization.method = "SCT",anchor.features = features)
immune.combined.sct <- IntegrateData(anchorset = immune.anchors, normalization.method = "SCT")

DefaultAssay(immune.combined.sct) <- "integrated"
immune.combined.sct <- RunPCA(immune.combined.sct, verbose = FALSE)
immune.combined.sct <- RunUMAP(immune.combined.sct, reduction = "pca",dims = 1:30)
#immune.combined.sct <- RunTSNE(immune.combined.sct, reduction = "pca",dims = 1:50)
immune.combined.sct <- FindNeighbors(immune.combined.sct, reduction = "pca", dims = 1:30)
immune.combined.sct <- FindClusters(immune.combined.sct, reduction = "pca", dims = 1:30,resolution = 2)


### defining new clusters (medullary subclusters) and adding to srt metadata
df <- data.frame(
  integrated_snn_res.2 = c(5, 0, 10, 3, 1, 16, 8, 7, 4, 9, 13, 11, 14, 6, 12, 2, 15),
  new_idents = c(
    "mTECII AIRE Low Cy",
    "mTECII AIRE Low",
    "mTECII AIRE High",
    "mTECII AIRE High",
    "mTECII AIRE High",
    "mTECII AIRE High",
    "Post-AIRE mTECIII/IV",
    "Post-AIRE mTECIII/IV",
    "Post-AIRE mTECIII/IV",
    "Post-AIRE mTECIII/IV",
    "Ionocyte",
    "Parathyroid",
    "cTEC",
    "Muscle-Like",
    "Muscle-Like",
    "Neuroendocrine-Like",
    "Ciliated"
  )
)

srt <- immune.combined.sct
meta <- srt@meta.data

meta$integrated_snn_res.2 <- as.character(meta$integrated_snn_res.2)
df$integrated_snn_res.2 <- as.character(df$integrated_snn_res.2)

meta_annotated <- left_join(meta, df, by = "integrated_snn_res.2")
rownames(meta_annotated) <- meta_annotated$barcode

srt@meta.data <- meta_annotated



### defining cells by medullary subcluster and macro time point (embryonic, fetal, and postnatal)
srt@meta.data$type_age<-paste0(srt@meta.data$new_idents,"__",srt@meta.data$macro)
Idents(srt)<-'type_age'
unique = unique(srt@active.ident)
u<- as.character(unique)
lev<-sort(u)


# loading gene sets
read_gmt <- function(path){
  tibble(line = read_lines(path)) %>% 
    separate(line, into = c("pathway", "url", "genes"), sep = "\t", extra = "merge") %>% 
    dplyr::select(-url) %>% 
    mutate(genes = str_split(genes, "\t")) %>% 
    unnest(genes)
}

version <- "7.5"
gmt_path <- str_glue("https://data.broadinstitute.org/gsea-msigdb/msigdb/release/{version}/c2.cp.v{version}.symbols.gmt")
pathway_key <- read_gmt(gmt_path)



pathway1 = "REACTOME_INTERFERON_GAMMA_SIGNALING"
genes <- pathway_key %>% filter(pathway == pathway1) %>% pull(genes)

srt<- AddModuleScore(srt, assay = "RNA", list(genes), name = "gamma")



pathway1 = "REACTOME_INTERFERON_ALPHA_BETA_SIGNALING"
genes <- pathway_key %>% filter(pathway == pathway1) %>% pull(genes)

srt <- AddModuleScore(srt, assay = "RNA", list(genes), name = "ab")



## setting up plots
features<-c('ab1','gamma1')



levels=c("mTECII AIRE Low",        # Lower expression level
         "mTECII AIRE Low Cy",     # Slightly higher or different condition of Low
         "mTECII AIRE High",       # Higher expression level
         "Post-AIRE mTECIII/IV",   # Post-AIRE stage
         "Neuroendocrine-Like",    # "Like" type 1
         "Muscle-Like",            # "Like" type 2
         "Ionocyte",               # Distinct cell type
         "Ciliated")                # Distinct cell type
plots <- list()

cols = c("#FFCB3E","#b1b67b","#026835","#7663a0","darkblue","#D95F02","#4E7D96", "#AB4F76")
for (feature in features) {
  # Generate the violin plot and extract the data
  j <- VlnPlot(srt, features = feature, combine = FALSE)
  q <- j[[1]]$data
  
  # Group by 'ident' and calculate the mean and standard deviation dynamically
  df_grp <- q %>%
    group_by(ident) %>%
    summarise(Average_Expression = mean(.data[[feature]], na.rm = TRUE),
              sd = sd(.data[[feature]], na.rm = TRUE),
              .groups = 'drop')
  
  # Transform the data frame
  df2 <- df_grp %>%
    separate(ident, into = c("type", "time"), sep = "__") %>%
    mutate(
      type = case_when(
        type == "mTEC 1" ~ "mTECI",
        type == "mTEC 2" ~ "mTECII",
        TRUE ~ type
      )
    )
  
  # Prepare the data frame for plotting
  df <- df2
  df$time <- factor(df$time, levels = c("6_7w", "16_17_18w", "3_10_pn"))
  df$type <- factor(df$type, levels = levels)
  
  # Generate the plot
  plt <- ggplot(df, aes(x = time, y = Average_Expression, group = type, colour = type)) + 
    ggtitle(feature) +
    geom_line(size = 1) + 
    theme_minimal() + labs(y=NULL)+
    theme(axis.text = element_text(size = 12, color = 'black')) +
    theme(axis.text.y = element_text(size = 8, color = 'black')) +
    theme(axis.text.x = element_text(size = 12, color = 'black',angle = 45,hjust = 1)) +
    scale_color_manual(values = cols) + 
    #scale_x_discrete(labels = c("Embryonic", "Fetal", "Postnatal")) + 
    theme(axis.title.x = element_blank())+NoLegend()+
    scale_x_discrete(labels = c("Emb.", "Fet.", "PN."),expand = c(0, 0))
  
  
  # Store the plot in the list
  plots[[feature]] <- plt
}


## displaying plots using patchwork
wrap_plots(plots,ncol = 2)
